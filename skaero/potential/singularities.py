"""
The following script contains a set of singularities. Most of them were taken
directly from https://github.com/barbagroup/AeroPython.
"""

import numpy


class UniformStream:
    """
    Contains information related to a uniform stream.
    """

    def __init__(self, U, alfa):
        """Sets the location and strength of the singularity.

        Parameters
        ----------
        U: float
            Flow velocity at infinity.
        alpha: float
            Angle in radians for the incoming flow.
        """
        self.U_inf = U
        self.alfa = alfa

    def velocity(self, X, Y):
        """Computes the velocity field generated by the singularity.

        Parameters
        ----------
        X: 2D Numpy array of floats
            x-coordinate of the mesh points.
        Y: 2D Numpy array of floats
            y-coordinate of the mesh points.
        """
        self.u = self.U_inf * numpy.cos(self.alfa)
        self.v = self.U_inf * numpy.sin(self.alfa)

        return self.u, self.v

    def stream_function(self, X, Y):
        """
        Computes the stream-function generated by the singularity.

        Parameters
        ----------
        X: 2D Numpy array of floats
            x-coordinate of the mesh points.
        Y: 2D Numpy array of floats
            y-coordinate of the mesh points.
        """
        self.psi = self.U_inf * (numpy.cos(self.alfa) - numpy.sin(self.alfa))


class Source:
    """
    Contains information related to a source (or sink).
    """

    def __init__(self, strength, x, y):
        """Sets the location and strength of the singularity.

        Parameters
        ----------
        strength: float
            Strength of the Source.
        x: float
            x-coordinate of the singularity.
        y: float
            y-coordinate of the singularity.
        """
        self.strength = strength
        self.x, self.y = x, y

    def velocity(self, X, Y):
        """Computes the velocity field generated by the singularity.

        Parameters
        ----------
        X: 2D Numpy array of floats
            x-coordinate of the mesh points.
        Y: 2D Numpy array of floats
            y-coordinate of the mesh points.
        """
        self.u = (
            self.strength
            / (2 * numpy.pi)
            * (X - self.x)
            / ((X - self.x) ** 2 + (Y - self.y) ** 2)
        )
        self.v = (
            self.strength
            / (2 * numpy.pi)
            * (Y - self.y)
            / ((X - self.x) ** 2 + (Y - self.y) ** 2)
        )

        return self.u, self.v

    def stream_function(self, X, Y):
        """
        Computes the stream-function generated by the singularity.

        Parameters
        ----------
        X: 2D Numpy array of floats
            x-coordinate of the mesh points.
        Y: 2D Numpy array of floats
            y-coordinate of the mesh points.
        """
        self.psi = (
            self.strength / (2 * numpy.pi) * numpy.arctan2((Y - self.y), (X - self.x))
        )


class Vortex:
    """
    Contains information related to a vortex.
    """

    def __init__(self, strength, x, y):
        """
        Sets the location and strength of the vortex.

        Parameters
        ----------
        strength: float
            Strength of the vortex.
        x: float
            x-coordinate of the vortex.
        y: float
            y-coordinate of the vortex.
        """
        self.strength = strength
        self.x, self.y = x, y

    def velocity(self, X, Y):
        """Computes the velocity field generated by a vortex.

        Parameters
        ----------
        X: 2D Numpy array of floats
            x-coordinate of the mesh points.
        Y: 2D Numpy array of floats
            y-coordinate of the mesh points.
        """
        self.u = (
            +self.strength
            / (2 * numpy.pi)
            * (Y - self.y)
            / ((X - self.x) ** 2 + (Y - self.y) ** 2)
        )
        self.v = (
            -self.strength
            / (2 * numpy.pi)
            * (X - self.x)
            / ((X - self.x) ** 2 + (Y - self.y) ** 2)
        )

        return self.u, self.v

    def stream_function(self, X, Y):
        """
        Computes the stream-function generated by a vortex.

        Parameters
        ----------
        X: 2D Numpy array of floats
            x-coordinate of the mesh points.
        Y: 2D Numpy array of floats
            y-coordinate of the mesh points.
        """
        self.psi = (
            -self.strength
            / (4 * numpy.pi)
            * numpy.log((X - self.x) ** 2 + (Y - self.y) ** 2)
        )


class Doublet:
    """
    Contains information related to a doublet.
    """

    def __init__(self, strength, x, y):
        """
        Sets the location and strength of the doublet.

        Parameters
        ----------
        strength: float
            Strength of the doublet.
        x: float
            x-coordinate of the doublet.
        y: float
            y-coordinate of the doublet.
        """
        self.strength = strength
        self.x, self.y = x, y

    def velocity(self, X, Y):
        """
        Computes the velocity field generated by a doublet.

        Parameters
        ----------
        X: 2D Numpy array of floats
            x-coordinate of the mesh points.
        Y: 2D Numpy array of floats
            y-coordinate of the mesh points.
        """
        self.u = (
            -self.strength
            / (2 * numpy.pi)
            * ((X - self.x) ** 2 - (Y - self.y) ** 2)
            / ((X - self.x) ** 2 + (Y - self.y) ** 2) ** 2
        )
        self.v = (
            -self.strength
            / (2 * numpy.pi)
            * 2
            * (X - self.x)
            * (Y - self.y)
            / ((X - self.x) ** 2 + (Y - self.y) ** 2) ** 2
        )

        return self.u, self.v

    def stream_function(self, X, Y):
        """
        Computes the stream-function generated by a doublet.

        Parameters
        ----------
        X: 2D Numpy array of floats
            x-coordinate of the mesh points.
        Y: 2D Numpy array of floats
            y-coordinate of the mesh points.
        """
        self.psi = (
            -self.strength
            / (2 * numpy.pi)
            * (Y - self.y)
            / ((X - self.x) ** 2 + (Y - self.y) ** 2)
        )
